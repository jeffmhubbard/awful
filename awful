#!/usr/bin/env bash

#
# Awful Lock Screen
# Blur + Vignette Lock Screen using i3lock-color and FFmpeg
#
# extbin: ffmpeg i3lock xrandr xdpyinfo

APPNAME='awful'
VERSION='0.0.0-alpha'

# Paths
USER_CONF="$HOME/.config/awful/config"
CACHE_DIR=$HOME/.cache/awful
IMG_CACHE=$CACHE_DIR/lockscreen.png
IMG_CAP=$CACHE_DIR/capture.png

# Defaults
barcolor=ffffff19
typingcolor=00ff0080
deletecolor=ffff0080
authcolor=00ffff80
errorcolor=ff000080
textcolor=ffffffe6
subtextcolor=ffffff80
font="sans-serif"
textsize=64
subtextsize=24
greetertext="Welcome"
timetext="%l:%M %p"
datetext="%A, %b %e, %Y"
mesgcolor=ffffffff
mesgfont="sans-serif"
mesgsize=16
authmesg="Verifying..."
errormesg="Access Denied"
lockmesg="Locking..."
failedmesg="Lock Failed"
inputmesg="Enter Password..."
stepper=10
screen=1
span=true

# Load config file
if [ -e $USER_CONF ]; then
    source "$USER_CONF"
fi

# Create cache directory
mkdir -p $CACHE_DIR

# Get list of displays
get_display_list () {
    local NUM=0
    mapfile -t ACTIVE < <( xrandr --listactivemonitors )
    for DISP in "${ACTIVE[@]:1}"; do
        (( NUM++ ))
        DISP=$(echo $DISP | sed -r 's/\/[0-9]*//g')
        IFS=' ' read -r -a INFO <<< "$DISP"
        DISP_LIST+=("$NUM ${INFO[3]} ${INFO[2]}")
    done
}

# Get total combined display resolution
get_total_size () {
    TOTAL_SIZE=$(xdpyinfo | grep -w "dimensions" | sed -r 's/^[^0-9]*([0-9]+x[0-9]+).*$/\1/')
}

# Pass through path if file, or return random if dir
get_image_path() {
    local path="$1"
    if [ ! -d "$path" ]; then
        IMG_CACHE="$path"
        return
    fi
    dir=("$path"/*)
    dir="${dir[RANDOM % ${#dir[@]}]}"
    get_image_path "$dir"
}

# Cache screen capture with effects
cache_x11grab () {
    echo "Caching screen capture"
    echo "Rendering blur and vignette..."
    ffmpeg -loglevel -8 -y \
        -f x11grab -framerate 1 \
        -video_size $TOTAL_SIZE \
        -i :0.0 -vframes 1 \
        -vf "boxblur=3:1, vignette=angle=PI/4" \
        "$IMG_CAP"
}

# Cache wallpaper with effects
cache_wallpaper () {
    echo "Caching $(basename $1)"
    echo "Rendering blur and vignette..."
    local resx="${TOTAL_SIZE%%x*}"
    local resy="${TOTAL_SIZE##*x}"
    local scale="$resx:$resy:force_original_aspect_ratio=increase,crop=$resx:$resy"
    ffmpeg -loglevel -8 -y \
        -i "$1" \
        -vf "scale=$scale, boxblur=3:1, vignette=angle=PI/4" \
        "$IMG_CACHE"
}

# Update cached image
update () {
    [[ -e $IMG_CACHE ]] && rm $IMG_CACHE

    get_display_list
    DNUM=${#DISP_LIST[*]}
    [[ $DNUM -gt 1 ]] && echo "$DNUM displays detected!"

    get_total_size
    [[ $DNUM -gt 1 ]] && echo "Using $TOTAL_SIZE resolution!"

    cache_wallpaper "$1"
    [[ -e $IMG_CACHE ]] && echo "Complete!"
}

# Capture screen shot
capture () {
    [[ -e $IMG_CAP ]] && rm $IMG_CAP

    cache_x11grab
    [[ -e $IMG_CAP ]] && echo "Complete!"
}

# Lock screen
lock () {

    get_display_list
    DNUM=${#DISP_LIST[*]}
    [[ $DNUM -gt 1 ]] && echo "$DNUM displays detected!"

    get_total_size
    [[ $DNUM -gt 1 ]] && echo "Using $TOTAL_SIZE resolution!"

    prelock
    case "$1" in
        1)
            # use cached wallpaper
            i3lock_wrapper "$IMG_CACHE"
            ;;
        2)
            # use screen capture
            capture
            i3lock_wrapper "$IMG_CAP"
            ;;
    esac
    postlock
}

prelock() {
    notify-send "DUNST_COMMAND_PAUSE"
    #pkill -u "$USER" -USR1 dunst
    #if [ ! -z "$(pidof dunst)" ]; then
    #    pkill -u "$USER" -USR1 dunst
    #fi
}

# Wrap i3lock
i3lock_wrapper () {
    echo "Locking..."
    local LOCK_IMG=$1

    local totalx="${TOTAL_SIZE%%x*}"
    local totaly="${TOTAL_SIZE##*x}"
    if [ $screen -lt 1 ]; then
        local scrwidth=$(($totalx/$DNUM))
        local scrheight=$(($totaly))
    else
        local scrgeo=${DISP_LIST[$(($screen-1))]##* }
        local scrres=${scrgeo%%+*}
        local scrwidth=${scrres%%x*}
        local scrheight=${scrres##*x}
    fi

    # allow position time\date on second display
    if [[ $span = true ]]; then
        rightpos=$totalx
    else
        rightpos=$scrwidth
    fi

    i3lock \
        --screen "$screen" \
        --image="$LOCK_IMG" \
        --bar-indicator \
        --bar-position=$scrheight --bar-direction 1 \
        --bar-width $scrwidth --bar-orientation=horizontal \
        --bar-max-height=25 \
        --bar-step="$stepper" --bar-periodic-step="$stepper"*2 \
        --bar-color="$barcolor" \
        --keyhlcolor="$typingcolor" --bshlcolor="$deletecolor" \
        --ringvercolor="$authcolor" --ringwrongcolor="$errorcolor" \
        --timestr="$timetext" --force-clock \
        --timepos x+$rightpos-30:$scrheight-80 --time-align 2 \
        --timecolor="$textcolor" --time-font="$font" --timesize="$textsize" \
        --datestr="$datetext" \
        --datepos x+$rightpos-30:$scrheight-45 --date-align 2 \
        --datecolor="$subtextcolor" --date-font="$font" --datesize="$subtextsize" \
        --greetertext="$greetertext" \
        --greeterpos x+30:$scrheight-80 --greeter-align 1 \
        --greetercolor="$textcolor" --greeter-font="$font" --greetersize="$textsize" \
        --keylayout 0 \
        --layoutpos x+30:$scrheight-45 --layout-align 1 \
        --layoutcolor="$subtextcolor" --layout-font="$font" --layoutsize="$subtextsize" \
        --veriftext="$authmesg" \
        --verifpos x+10:$scrheight-6 --verif-align 1 \
        --verifcolor="$mesgcolor" --verif-font="$mesgfont" --verifsize="$mesgsize" \
        --wrongtext="$errormesg" \
        --wrongpos x+10:$scrheight-6 --wrong-align 1 \
        --wrongcolor="$mesgcolor" --wrong-font="$mesgfont" --wrongsize="$mesgsize" \
        --modifpos x+$scrwidth-10:$scrheight-6 --modif-align 2 \
        --statuspos x+10:$scrheight-6 \
        --locktext="$lockmesg" --lockfailedtext="$failedmesg" \
        --noinputtext="$inputmesg" \
        --show-failed-attempts --ignore-empty-password \
        --redraw-thread "$lockargs"
}

# Run after unlocking
postlock() {
    notify-send "DUNST_COMMAND_RESUME"
    #pkill -u "$USER" -USR2 dunst
    #if [ ! -z "$(pidof dunst)" ] ; then
    #    pkill -u "$USER" -USR2 dunst
    #fi
}

# Help message
usage() {
    echo
    echo " $APPNAME $VERSION"
    echo
    echo "  -u --update"
    echo "      Update lock screen image"
    echo "      $ $APPNAME -u PATH"
    echo
    echo "  -l --lock"
    echo "      Lock screen with cached image"
    echo "      $ $APPNAME -l"
    echo
    echo "  -c --capture"
    echo "      Capture screen and lock"
    echo "      $ $APPNAME -c"
    echo
    echo "  -s --suspend"
    echo "      Lock screen and suspend system"
    echo "      $ $APPNAME -s"
    echo
    exit 1
}

# No arguments
[[ "$1" = '' ]] && usage

# Parse arguments
for arg in "$@"; do
    [[ "${arg:0:1}" = '-' ]] || continue
    case "$1" in
        -h | --help)
            usage
            break
            ;;
        -s | --suspend)
            runsuspend=true
            ;&
        -l | --lock)
            runlock=true
            [[ $runsuspend ]] || lockargs="$lockargs -n"
            ;;
        -c | --capture)
            runcap=true
            [[ $runsuspend ]] || lockargs="$lockargs -n"
            ;;
        -u | --update)
            runupdate=true
            argpath="$2"
            ;;
        --)
            lockargs="$lockargs ${@:2}"
            break
            ;;
        *)
            echo "unknown argument: $1"
            break
            ;;
    esac
done

[[ $runupdate ]] && update "$argpath"

[[ $runlock ]] && lock 1 && \
    { [[ $runsuspend ]] && systemctl suspend; }

[[ $runcap ]] && lock 2 && \
    { [[ $runsuspend ]] && systemctl suspend; }


exit 0

# vim: ft=sh:
