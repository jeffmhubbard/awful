#!/usr/bin/env bash

# Awful Lock Screen
# Blur + Vignette Lock Screen using i3lock-color and FFmpeg
#
# extbin: ffmpeg i3lock xrandr xdpyinfo

APP_NAME="awful"
APP_VER="0.2"
USER_CONF="$HOME/.config/awful/config"
CACHE_DIR="$HOME/.cache/awful"
IMAGE_CACHE="$CACHE_DIR/lockscreen.png"
IMAGE_CAPTURE="$CACHE_DIR/capture.png"

# Defaults
barcolor=ffffff19
typingcolor=00ff0080
deletecolor=ffff0080
authcolor=00ffff80
errorcolor=ff000080
textcolor=ffffffe6
subtextcolor=ffffff80
font="sans-serif"
textsize=64
subtextsize=24
greetertext="Welcome"
timetext="%l:%M%p"
datetext="%A, %b %e, %Y"
mesgcolor=ffffffff
mesgfont="sans-serif"
mesgsize=16
authmesg="Verifying..."
errormesg="Access Denied"
lockmesg="Locking..."
failedmesg="Lock Failed"
inputmesg="Enter Password..."
stepper=10
screen=0
span=false

# main
main() {

  print_app "$APP_NAME $APP_VER"

  # No arguments
  if [ "$1" == '' ]; then
    print_err "No arguments passed"
    usage
    exit 1
  fi

  # Parse arguments
  for arg in "$@"; do
    [[ "${arg:0:1}" == '-' ]] || continue
    case "$1" in
      -h | --help)
        usage
        exit
        ;;
      -l | --lock)
        runlock=true
        lockargs="$lockargs"
        ;;
      -c | --capture)
        runcap=true
        lockargs="$lockargs"
        ;;
      -u | --update)
        runupdate=true
        argpath="$2"
        ;;
      --)
        lockargs="$lockargs ${*:2}"
        ;;
      *)
        print_err "Unknown argument: $1"
        exit 1
        ;;
    esac
  done

  # Load config file
  if [ -e "$USER_CONF" ]; then
    # shellcheck source=/dev/null
    source "$USER_CONF"
  fi

  # Create cache directory
  mkdir -p "$CACHE_DIR" 2>/dev/null

  if [ -n "$runupdate" ]; then
    update "$argpath"

  elif [ -n "$runlock" ]; then
    lock_select lock

  elif [ -n "$runcap" ]; then
    lock_select capture

  else
    print_err "Something went wrong"
    exit 1
  fi

}

# Update cached image
update() {

  local path="$1"

  print_inf "Updating cache..."

  get_image_path "$path"

  get_display_list
  get_total_size
  DISPLAY_COUNT=${#DISPLAY_LIST[*]}

  print_display_info "$DISPLAY_COUNT" "$TOTAL_SIZE" "$span"

  [[ -f "$IMAGE_CACHE" ]] && rm "$IMAGE_CACHE"

  if [ "$span" = true ] || [ "$DISPLAY_COUNT" = 1 ]; then
    cache_image "$TOTAL_SIZE" "$IMAGE_CACHE"

  else
    compose_image
  fi

  [[ -f "$IMAGE_CACHE" ]] && print_inf "Done!"

}

# Pass through path if file, or return random if dir
# returns $IMAGE_PATH
get_image_path() {

  local path="$1"
  local dir=("$path"/*)
  local rpath

  if [ -f "$path" ]; then
    IMAGE_PATH="$path"

  elif [ -d "$path" ]; then
    rpath="${dir[RANDOM % ${#dir[@]}]}"
    get_image_path "$rpath"

  else
    print_err "Error locating image: $path"
    exit 1
  fi

}

# Get list of displays
# returns $DISPLAY_LIST
get_display_list() {

  local id=0
  local display
  local info

  mapfile -t active < <(xrandr --listactivemonitors)
  for display in "${active[@]:1}"; do
    ((id++))
    IFS=" " read -r -a info <<< "$(echo "$display" | sed -r 's/\/[0-9]*//g')"
    DISPLAY_LIST+=("$id ${info[3]} ${info[2]}")
  done

}

# Get total combined display resolution
# returns $TOTAL_SIZE
get_total_size() {

  TOTAL_SIZE=$(xdpyinfo | grep -w "dimensions" | sed -r 's/^[^0-9]*([0-9]+x[0-9]+).*$/\1/')

}

# display info
print_display_info() {

  local count="$1"
  local size="$2"

  print_msg "Displays: $count Size: $size Span: $span"

}

# Cache image with scaled to resolution with effects
cache_image() {

  local res_x="${1%%x*}"
  local res_y="${1##*x}"
  local outfile="$2"
  local scale="$res_x:$res_y:force_original_aspect_ratio=increase,crop=$res_x:$res_y"

  print_act "Caching $(basename "$IMAGE_PATH") @ ${res_x}x${res_y}"

  ffmpeg -loglevel -8 -y \
    -i "$IMAGE_PATH" \
    -vf "scale=$scale, boxblur=3:1, vignette=angle=PI/4" \
    "$outfile"

}

# Compose lockscreen image from per-resolution versions and canvas
compose_image() {

  local tmp_files=()
  local display

  for display in "${DISPLAY_LIST[@]}"; do

    IFS=" " read -r -a info  <<< "$display"
    local id="${info[0]}"
    local device="${info[1]}"
    local geometry="${info[2]}"

    read -r -a cols <<< "${geometry//[x+-]/ }"
    local position="${geometry#*${cols[1]}}"
    local resolution="${geometry%${position}*}"

    read -r -a val <<< "${position//[+-]/ }"
    read -r -a sym <<< "${position//[0-9]/ }"
    local pos_x="${sym[0]}${val[0]}"
    local pos_y="${sym[1]}${val[1]}"

    local tmp_img="${CACHE_DIR}/${device}.png"

    cache_image "$resolution" "$tmp_img"

    file_args="$file_args -i $tmp_img"
    if [ "$DISPLAY_COUNT" -gt "$id" ]; then
      filter_args="${filter_args}[${id}:v]overlay=${pos_x}:${pos_y}[v${id}];[v${id}]"
    else
      filter_args="${filter_args}[${id}:v]overlay=${pos_x}:${pos_y}[output]"
    fi

    tmp_files+=("$tmp_img")
  done

  make_canvas
  tmp_files+=("$CANVAS")

  print_act "Merging temp files..."

  ffmpeg -i ${CANVAS} ${file_args} \
    -filter_complex "[0:v]${filter_args}" \
    -map [output]:v \
    -pix_fmt rgb24 \
    -loglevel -8 -y \
    "$IMAGE_CACHE"

  print_act "Cleaning up..."

  rm "${tmp_files[@]}"

}

# make blue canvas
# returns $CANVAS
make_canvas() {

  CANVAS="$CACHE_DIR/canvas.png"

  print_act "Creating canvas @ $TOTAL_SIZE..."

  ffmpeg \
    -loglevel -8 -y \
    -f lavfi \
    -i "color=blue:$TOTAL_SIZE" \
    "$CANVAS"

}

# Capture screen shot
capture() {

  print_act "Caching screen capture..."

  cache_capture

  if [ ! -f "$IMAGE_CAPTURE" ]; then
    print_err "Failed to capture screen"
    exit 1
  fi

}

# grab frame and apply effects
# returns $IMAGE_CAPTURE
cache_capture() {

  ffmpeg -loglevel -8 -y \
    -f x11grab -framerate 1 \
    -video_size "$TOTAL_SIZE" \
    -i :0.0 -vframes 1 \
    -vf "boxblur=3:1, vignette=angle=PI/4" \
    "$IMAGE_CAPTURE"

}

# Lock screen
lock_select() {

  get_display_list
  get_total_size
  DISPLAY_COUNT=${#DISPLAY_LIST[*]}

  print_display_info "$DISPLAY_COUNT" "$TOTAL_SIZE" "$span"

  case "$1" in
    lock)
      # use cached wallpaper
      lock "$IMAGE_CACHE"
      ;;
    capture)
      # use screen capture
      capture
      lock "$IMAGE_CAPTURE"
      ;;
  esac

}

# Wrap i3lock
lock() {

  local image="$1"

  if [ ! -f "$image" ]; then
    print_err "Cached image not found"
    print_err "Please run --update again"
    exit 1
  fi

  local total_x="${TOTAL_SIZE%%x*}"
  local total_y="${TOTAL_SIZE##*x}"

  if [ $screen -lt 1 ]; then
    local width=$((total_x / DISPLAY_COUNT))
    local height=$((total_y))
  else
    local geometry=${DISPLAY_LIST[$((screen - 1))]##* }
    local resolution=${geometry%%[+-]*}
    local width=${resolution%%x*}
    local height=${resolution##*x}
  fi

  # Allow position time\date on second display
  if [[ $span == true ]]; then
    rightpos="$total_x"
  else
    rightpos="$width"
  fi

  prelock

  print_inf "Locking..."

  i3lock \
    --screen "$screen" \
    --image="$image" \
    --bar-indicator \
    --bar-position="$height" --bar-direction 1 \
    --bar-width "$width" --bar-orientation=horizontal \
    --bar-max-height=28 \
    --bar-step="$stepper" --bar-periodic-step="$stepper"*2 \
    --bar-color="$barcolor" \
    --keyhlcolor="$typingcolor" --bshlcolor="$deletecolor" \
    --ringvercolor="$authcolor" --ringwrongcolor="$errorcolor" \
    --timestr="$timetext" --force-clock \
    --timepos x+"$rightpos"-30:"$height"-80 --time-align 2 \
    --timecolor="$textcolor" --time-font="$font" --timesize="$textsize" \
    --datestr="$datetext" \
    --datepos x+"$rightpos"-30:"$height"-45 --date-align 2 \
    --datecolor="$subtextcolor" --date-font="$font" --datesize="$subtextsize" \
    --greetertext="$greetertext" \
    --greeterpos x+30:"$height"-80 --greeter-align 1 \
    --greetercolor="$textcolor" --greeter-font="$font" --greetersize="$textsize" \
    --keylayout 0 \
    --layoutpos x+30:"$height"-45 --layout-align 1 \
    --layoutcolor="$subtextcolor" --layout-font="$font" --layoutsize="$subtextsize" \
    --veriftext="$authmesg" \
    --verifpos x+10:"$height"-6 --verif-align 1 \
    --verifcolor="$mesgcolor" --verif-font="$mesgfont" --verifsize="$mesgsize" \
    --wrongtext="$errormesg" \
    --wrongpos x+10:"$height"-6 --wrong-align 1 \
    --wrongcolor="$mesgcolor" --wrong-font="$mesgfont" --wrongsize="$mesgsize" \
    --modifpos x+"$width"-10:"$height"-6 --modif-align 2 \
    --statuspos x+10:"$height"-6 \
    --locktext="$lockmesg" --lockfailedtext="$failedmesg" \
    --noinputtext="$inputmesg" \
    --show-failed-attempts --ignore-empty-password \
    --redraw-thread --nofork "$lockargs"

  print_inf "Unlocking..."

  postlock

}

prelock() {

  print_msg "Init prelock"

  # pause dunst
  if [ -n "$(pidof dunst)" ]; then
    pkill -u "$USER" -USR1 dunst
  fi

}

postlock() {

  print_msg "Init postlock"

  # remove capture
  [[ -f "$IMAGE_CAPTURE" ]] && rm "$IMAGE_CAPTURE"

  # unpause dunst
  if [ -n "$(pidof dunst)" ]; then
    pkill -u "$USER" -USR2 dunst
  fi

}

# Format output
print_app() {
  echo -e "\e[90m[\e[95mA\e[90m] \e[94m$1\e[0m"
}

print_inf() {
  echo -e "\e[90m[\e[97mi\e[90m] \e[97m$1\e[0m"
}

print_msg() {
  echo -e "\e[90m[\e[93m-\e[90m] \e[93m$1\e[0m"
}

print_act() {
  echo -e "\e[90m[\e[92m+\e[90m] \e[92m$1\e[0m"
}

print_err() {
  echo -e "\e[90m[\e[91m!\e[90m] \e[91m$1\e[0m"
}

# Help message
usage() {

  echo
  echo "Usage: $APP_NAME [--update <PATH>] [--lock] [--capture]"
  echo
  echo "  -u | --update <PATH>"
  echo "      Update lock screen image"
  echo
  echo "  -l | --lock"
  echo "      Lock screen with cached image"
  echo
  echo "  -c | --capture"
  echo "      Capture screenshot and lock"
  echo

}

main "$@"

exit 0

# vim: ft=sh ts=2 sw=0 et:
